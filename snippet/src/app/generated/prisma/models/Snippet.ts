
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Snippet` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Snippet
 * 
 */
export type SnippetModel = runtime.Types.Result.DefaultSelection<Prisma.$SnippetPayload>

export type AggregateSnippet = {
  _count: SnippetCountAggregateOutputType | null
  _avg: SnippetAvgAggregateOutputType | null
  _sum: SnippetSumAggregateOutputType | null
  _min: SnippetMinAggregateOutputType | null
  _max: SnippetMaxAggregateOutputType | null
}

export type SnippetAvgAggregateOutputType = {
  id: number | null
}

export type SnippetSumAggregateOutputType = {
  id: number | null
}

export type SnippetMinAggregateOutputType = {
  id: number | null
  title: string | null
  code: string | null
}

export type SnippetMaxAggregateOutputType = {
  id: number | null
  title: string | null
  code: string | null
}

export type SnippetCountAggregateOutputType = {
  id: number
  title: number
  code: number
  _all: number
}


export type SnippetAvgAggregateInputType = {
  id?: true
}

export type SnippetSumAggregateInputType = {
  id?: true
}

export type SnippetMinAggregateInputType = {
  id?: true
  title?: true
  code?: true
}

export type SnippetMaxAggregateInputType = {
  id?: true
  title?: true
  code?: true
}

export type SnippetCountAggregateInputType = {
  id?: true
  title?: true
  code?: true
  _all?: true
}

export type SnippetAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Snippet to aggregate.
   */
  where?: Prisma.SnippetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Snippets to fetch.
   */
  orderBy?: Prisma.SnippetOrderByWithRelationInput | Prisma.SnippetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SnippetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Snippets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Snippets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Snippets
  **/
  _count?: true | SnippetCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SnippetAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SnippetSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SnippetMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SnippetMaxAggregateInputType
}

export type GetSnippetAggregateType<T extends SnippetAggregateArgs> = {
      [P in keyof T & keyof AggregateSnippet]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSnippet[P]>
    : Prisma.GetScalarType<T[P], AggregateSnippet[P]>
}




export type SnippetGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SnippetWhereInput
  orderBy?: Prisma.SnippetOrderByWithAggregationInput | Prisma.SnippetOrderByWithAggregationInput[]
  by: Prisma.SnippetScalarFieldEnum[] | Prisma.SnippetScalarFieldEnum
  having?: Prisma.SnippetScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SnippetCountAggregateInputType | true
  _avg?: SnippetAvgAggregateInputType
  _sum?: SnippetSumAggregateInputType
  _min?: SnippetMinAggregateInputType
  _max?: SnippetMaxAggregateInputType
}

export type SnippetGroupByOutputType = {
  id: number
  title: string
  code: string
  _count: SnippetCountAggregateOutputType | null
  _avg: SnippetAvgAggregateOutputType | null
  _sum: SnippetSumAggregateOutputType | null
  _min: SnippetMinAggregateOutputType | null
  _max: SnippetMaxAggregateOutputType | null
}

type GetSnippetGroupByPayload<T extends SnippetGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SnippetGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SnippetGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SnippetGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SnippetGroupByOutputType[P]>
      }
    >
  >



export type SnippetWhereInput = {
  AND?: Prisma.SnippetWhereInput | Prisma.SnippetWhereInput[]
  OR?: Prisma.SnippetWhereInput[]
  NOT?: Prisma.SnippetWhereInput | Prisma.SnippetWhereInput[]
  id?: Prisma.IntFilter<"Snippet"> | number
  title?: Prisma.StringFilter<"Snippet"> | string
  code?: Prisma.StringFilter<"Snippet"> | string
}

export type SnippetOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  code?: Prisma.SortOrder
}

export type SnippetWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.SnippetWhereInput | Prisma.SnippetWhereInput[]
  OR?: Prisma.SnippetWhereInput[]
  NOT?: Prisma.SnippetWhereInput | Prisma.SnippetWhereInput[]
  title?: Prisma.StringFilter<"Snippet"> | string
  code?: Prisma.StringFilter<"Snippet"> | string
}, "id">

export type SnippetOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  code?: Prisma.SortOrder
  _count?: Prisma.SnippetCountOrderByAggregateInput
  _avg?: Prisma.SnippetAvgOrderByAggregateInput
  _max?: Prisma.SnippetMaxOrderByAggregateInput
  _min?: Prisma.SnippetMinOrderByAggregateInput
  _sum?: Prisma.SnippetSumOrderByAggregateInput
}

export type SnippetScalarWhereWithAggregatesInput = {
  AND?: Prisma.SnippetScalarWhereWithAggregatesInput | Prisma.SnippetScalarWhereWithAggregatesInput[]
  OR?: Prisma.SnippetScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SnippetScalarWhereWithAggregatesInput | Prisma.SnippetScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Snippet"> | number
  title?: Prisma.StringWithAggregatesFilter<"Snippet"> | string
  code?: Prisma.StringWithAggregatesFilter<"Snippet"> | string
}

export type SnippetCreateInput = {
  title: string
  code: string
}

export type SnippetUncheckedCreateInput = {
  id?: number
  title: string
  code: string
}

export type SnippetUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SnippetUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SnippetCreateManyInput = {
  id?: number
  title: string
  code: string
}

export type SnippetUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SnippetUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  code?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SnippetCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  code?: Prisma.SortOrder
}

export type SnippetAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type SnippetMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  code?: Prisma.SortOrder
}

export type SnippetMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  code?: Prisma.SortOrder
}

export type SnippetSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type SnippetSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  code?: boolean
}, ExtArgs["result"]["snippet"]>

export type SnippetSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  code?: boolean
}, ExtArgs["result"]["snippet"]>

export type SnippetSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  code?: boolean
}, ExtArgs["result"]["snippet"]>

export type SnippetSelectScalar = {
  id?: boolean
  title?: boolean
  code?: boolean
}

export type SnippetOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "code", ExtArgs["result"]["snippet"]>

export type $SnippetPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Snippet"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    code: string
  }, ExtArgs["result"]["snippet"]>
  composites: {}
}

export type SnippetGetPayload<S extends boolean | null | undefined | SnippetDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SnippetPayload, S>

export type SnippetCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SnippetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SnippetCountAggregateInputType | true
  }

export interface SnippetDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Snippet'], meta: { name: 'Snippet' } }
  /**
   * Find zero or one Snippet that matches the filter.
   * @param {SnippetFindUniqueArgs} args - Arguments to find a Snippet
   * @example
   * // Get one Snippet
   * const snippet = await prisma.snippet.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SnippetFindUniqueArgs>(args: Prisma.SelectSubset<T, SnippetFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SnippetClient<runtime.Types.Result.GetResult<Prisma.$SnippetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Snippet that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SnippetFindUniqueOrThrowArgs} args - Arguments to find a Snippet
   * @example
   * // Get one Snippet
   * const snippet = await prisma.snippet.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SnippetFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SnippetFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SnippetClient<runtime.Types.Result.GetResult<Prisma.$SnippetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Snippet that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SnippetFindFirstArgs} args - Arguments to find a Snippet
   * @example
   * // Get one Snippet
   * const snippet = await prisma.snippet.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SnippetFindFirstArgs>(args?: Prisma.SelectSubset<T, SnippetFindFirstArgs<ExtArgs>>): Prisma.Prisma__SnippetClient<runtime.Types.Result.GetResult<Prisma.$SnippetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Snippet that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SnippetFindFirstOrThrowArgs} args - Arguments to find a Snippet
   * @example
   * // Get one Snippet
   * const snippet = await prisma.snippet.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SnippetFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SnippetFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SnippetClient<runtime.Types.Result.GetResult<Prisma.$SnippetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Snippets that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SnippetFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Snippets
   * const snippets = await prisma.snippet.findMany()
   * 
   * // Get first 10 Snippets
   * const snippets = await prisma.snippet.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const snippetWithIdOnly = await prisma.snippet.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SnippetFindManyArgs>(args?: Prisma.SelectSubset<T, SnippetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SnippetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Snippet.
   * @param {SnippetCreateArgs} args - Arguments to create a Snippet.
   * @example
   * // Create one Snippet
   * const Snippet = await prisma.snippet.create({
   *   data: {
   *     // ... data to create a Snippet
   *   }
   * })
   * 
   */
  create<T extends SnippetCreateArgs>(args: Prisma.SelectSubset<T, SnippetCreateArgs<ExtArgs>>): Prisma.Prisma__SnippetClient<runtime.Types.Result.GetResult<Prisma.$SnippetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Snippets.
   * @param {SnippetCreateManyArgs} args - Arguments to create many Snippets.
   * @example
   * // Create many Snippets
   * const snippet = await prisma.snippet.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SnippetCreateManyArgs>(args?: Prisma.SelectSubset<T, SnippetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Snippets and returns the data saved in the database.
   * @param {SnippetCreateManyAndReturnArgs} args - Arguments to create many Snippets.
   * @example
   * // Create many Snippets
   * const snippet = await prisma.snippet.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Snippets and only return the `id`
   * const snippetWithIdOnly = await prisma.snippet.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SnippetCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SnippetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SnippetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Snippet.
   * @param {SnippetDeleteArgs} args - Arguments to delete one Snippet.
   * @example
   * // Delete one Snippet
   * const Snippet = await prisma.snippet.delete({
   *   where: {
   *     // ... filter to delete one Snippet
   *   }
   * })
   * 
   */
  delete<T extends SnippetDeleteArgs>(args: Prisma.SelectSubset<T, SnippetDeleteArgs<ExtArgs>>): Prisma.Prisma__SnippetClient<runtime.Types.Result.GetResult<Prisma.$SnippetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Snippet.
   * @param {SnippetUpdateArgs} args - Arguments to update one Snippet.
   * @example
   * // Update one Snippet
   * const snippet = await prisma.snippet.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SnippetUpdateArgs>(args: Prisma.SelectSubset<T, SnippetUpdateArgs<ExtArgs>>): Prisma.Prisma__SnippetClient<runtime.Types.Result.GetResult<Prisma.$SnippetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Snippets.
   * @param {SnippetDeleteManyArgs} args - Arguments to filter Snippets to delete.
   * @example
   * // Delete a few Snippets
   * const { count } = await prisma.snippet.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SnippetDeleteManyArgs>(args?: Prisma.SelectSubset<T, SnippetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Snippets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SnippetUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Snippets
   * const snippet = await prisma.snippet.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SnippetUpdateManyArgs>(args: Prisma.SelectSubset<T, SnippetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Snippets and returns the data updated in the database.
   * @param {SnippetUpdateManyAndReturnArgs} args - Arguments to update many Snippets.
   * @example
   * // Update many Snippets
   * const snippet = await prisma.snippet.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Snippets and only return the `id`
   * const snippetWithIdOnly = await prisma.snippet.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SnippetUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SnippetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SnippetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Snippet.
   * @param {SnippetUpsertArgs} args - Arguments to update or create a Snippet.
   * @example
   * // Update or create a Snippet
   * const snippet = await prisma.snippet.upsert({
   *   create: {
   *     // ... data to create a Snippet
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Snippet we want to update
   *   }
   * })
   */
  upsert<T extends SnippetUpsertArgs>(args: Prisma.SelectSubset<T, SnippetUpsertArgs<ExtArgs>>): Prisma.Prisma__SnippetClient<runtime.Types.Result.GetResult<Prisma.$SnippetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Snippets.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SnippetCountArgs} args - Arguments to filter Snippets to count.
   * @example
   * // Count the number of Snippets
   * const count = await prisma.snippet.count({
   *   where: {
   *     // ... the filter for the Snippets we want to count
   *   }
   * })
  **/
  count<T extends SnippetCountArgs>(
    args?: Prisma.Subset<T, SnippetCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SnippetCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Snippet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SnippetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SnippetAggregateArgs>(args: Prisma.Subset<T, SnippetAggregateArgs>): Prisma.PrismaPromise<GetSnippetAggregateType<T>>

  /**
   * Group by Snippet.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SnippetGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SnippetGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SnippetGroupByArgs['orderBy'] }
      : { orderBy?: SnippetGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SnippetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSnippetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Snippet model
 */
readonly fields: SnippetFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Snippet.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SnippetClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Snippet model
 */
export interface SnippetFieldRefs {
  readonly id: Prisma.FieldRef<"Snippet", 'Int'>
  readonly title: Prisma.FieldRef<"Snippet", 'String'>
  readonly code: Prisma.FieldRef<"Snippet", 'String'>
}
    

// Custom InputTypes
/**
 * Snippet findUnique
 */
export type SnippetFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Snippet
   */
  select?: Prisma.SnippetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Snippet
   */
  omit?: Prisma.SnippetOmit<ExtArgs> | null
  /**
   * Filter, which Snippet to fetch.
   */
  where: Prisma.SnippetWhereUniqueInput
}

/**
 * Snippet findUniqueOrThrow
 */
export type SnippetFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Snippet
   */
  select?: Prisma.SnippetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Snippet
   */
  omit?: Prisma.SnippetOmit<ExtArgs> | null
  /**
   * Filter, which Snippet to fetch.
   */
  where: Prisma.SnippetWhereUniqueInput
}

/**
 * Snippet findFirst
 */
export type SnippetFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Snippet
   */
  select?: Prisma.SnippetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Snippet
   */
  omit?: Prisma.SnippetOmit<ExtArgs> | null
  /**
   * Filter, which Snippet to fetch.
   */
  where?: Prisma.SnippetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Snippets to fetch.
   */
  orderBy?: Prisma.SnippetOrderByWithRelationInput | Prisma.SnippetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Snippets.
   */
  cursor?: Prisma.SnippetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Snippets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Snippets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Snippets.
   */
  distinct?: Prisma.SnippetScalarFieldEnum | Prisma.SnippetScalarFieldEnum[]
}

/**
 * Snippet findFirstOrThrow
 */
export type SnippetFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Snippet
   */
  select?: Prisma.SnippetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Snippet
   */
  omit?: Prisma.SnippetOmit<ExtArgs> | null
  /**
   * Filter, which Snippet to fetch.
   */
  where?: Prisma.SnippetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Snippets to fetch.
   */
  orderBy?: Prisma.SnippetOrderByWithRelationInput | Prisma.SnippetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Snippets.
   */
  cursor?: Prisma.SnippetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Snippets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Snippets.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Snippets.
   */
  distinct?: Prisma.SnippetScalarFieldEnum | Prisma.SnippetScalarFieldEnum[]
}

/**
 * Snippet findMany
 */
export type SnippetFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Snippet
   */
  select?: Prisma.SnippetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Snippet
   */
  omit?: Prisma.SnippetOmit<ExtArgs> | null
  /**
   * Filter, which Snippets to fetch.
   */
  where?: Prisma.SnippetWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Snippets to fetch.
   */
  orderBy?: Prisma.SnippetOrderByWithRelationInput | Prisma.SnippetOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Snippets.
   */
  cursor?: Prisma.SnippetWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Snippets from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Snippets.
   */
  skip?: number
  distinct?: Prisma.SnippetScalarFieldEnum | Prisma.SnippetScalarFieldEnum[]
}

/**
 * Snippet create
 */
export type SnippetCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Snippet
   */
  select?: Prisma.SnippetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Snippet
   */
  omit?: Prisma.SnippetOmit<ExtArgs> | null
  /**
   * The data needed to create a Snippet.
   */
  data: Prisma.XOR<Prisma.SnippetCreateInput, Prisma.SnippetUncheckedCreateInput>
}

/**
 * Snippet createMany
 */
export type SnippetCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Snippets.
   */
  data: Prisma.SnippetCreateManyInput | Prisma.SnippetCreateManyInput[]
}

/**
 * Snippet createManyAndReturn
 */
export type SnippetCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Snippet
   */
  select?: Prisma.SnippetSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Snippet
   */
  omit?: Prisma.SnippetOmit<ExtArgs> | null
  /**
   * The data used to create many Snippets.
   */
  data: Prisma.SnippetCreateManyInput | Prisma.SnippetCreateManyInput[]
}

/**
 * Snippet update
 */
export type SnippetUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Snippet
   */
  select?: Prisma.SnippetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Snippet
   */
  omit?: Prisma.SnippetOmit<ExtArgs> | null
  /**
   * The data needed to update a Snippet.
   */
  data: Prisma.XOR<Prisma.SnippetUpdateInput, Prisma.SnippetUncheckedUpdateInput>
  /**
   * Choose, which Snippet to update.
   */
  where: Prisma.SnippetWhereUniqueInput
}

/**
 * Snippet updateMany
 */
export type SnippetUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Snippets.
   */
  data: Prisma.XOR<Prisma.SnippetUpdateManyMutationInput, Prisma.SnippetUncheckedUpdateManyInput>
  /**
   * Filter which Snippets to update
   */
  where?: Prisma.SnippetWhereInput
  /**
   * Limit how many Snippets to update.
   */
  limit?: number
}

/**
 * Snippet updateManyAndReturn
 */
export type SnippetUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Snippet
   */
  select?: Prisma.SnippetSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Snippet
   */
  omit?: Prisma.SnippetOmit<ExtArgs> | null
  /**
   * The data used to update Snippets.
   */
  data: Prisma.XOR<Prisma.SnippetUpdateManyMutationInput, Prisma.SnippetUncheckedUpdateManyInput>
  /**
   * Filter which Snippets to update
   */
  where?: Prisma.SnippetWhereInput
  /**
   * Limit how many Snippets to update.
   */
  limit?: number
}

/**
 * Snippet upsert
 */
export type SnippetUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Snippet
   */
  select?: Prisma.SnippetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Snippet
   */
  omit?: Prisma.SnippetOmit<ExtArgs> | null
  /**
   * The filter to search for the Snippet to update in case it exists.
   */
  where: Prisma.SnippetWhereUniqueInput
  /**
   * In case the Snippet found by the `where` argument doesn't exist, create a new Snippet with this data.
   */
  create: Prisma.XOR<Prisma.SnippetCreateInput, Prisma.SnippetUncheckedCreateInput>
  /**
   * In case the Snippet was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SnippetUpdateInput, Prisma.SnippetUncheckedUpdateInput>
}

/**
 * Snippet delete
 */
export type SnippetDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Snippet
   */
  select?: Prisma.SnippetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Snippet
   */
  omit?: Prisma.SnippetOmit<ExtArgs> | null
  /**
   * Filter which Snippet to delete.
   */
  where: Prisma.SnippetWhereUniqueInput
}

/**
 * Snippet deleteMany
 */
export type SnippetDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Snippets to delete
   */
  where?: Prisma.SnippetWhereInput
  /**
   * Limit how many Snippets to delete.
   */
  limit?: number
}

/**
 * Snippet without action
 */
export type SnippetDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Snippet
   */
  select?: Prisma.SnippetSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Snippet
   */
  omit?: Prisma.SnippetOmit<ExtArgs> | null
}
